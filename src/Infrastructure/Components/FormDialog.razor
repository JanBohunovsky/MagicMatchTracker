@using MagicMatchTracker.Infrastructure.Validation
@typeparam TModel

@if (Model is not null)
{
	<div class="modal show" tabindex="-1" @onclick="OnCancel">
		<AutoFocus class="@($"modal-dialog modal-dialog-scrollable {FullscreenMode.GetCssClass()}")" @onclick:stopPropagation="true">
			<EditForm EditContext="_editContext" OnValidSubmit="OnSubmit" class="modal-content">
				<FluentValidator/>
				@ChildContent(Model)
			</EditForm>
		</AutoFocus>
	</div>
	<div class="modal-backdrop show"></div>
}

@code {

	private EditContext? _editContext;

	/// <summary>
	/// Model to be used for the form dialog. Also controls the visibility of the dialog.
	/// </summary>
	[Parameter, EditorRequired]
	public required TModel? Model { get; set; }

	/// <summary>
	/// Content to be rendered inside <c>EditForm.modal-content</c>.
	/// </summary>
	[Parameter, EditorRequired]
	public required RenderFragment<TModel> ChildContent { get; set; }

	/// <summary>
	/// Controls when the dialog is displayed as a fullscreen dialog.
	/// </summary>
	/// <remarks>Defaults to <see cref="DialogFullscreenMode.Never"/>.</remarks>
	[Parameter]
	public DialogFullscreenMode FullscreenMode { get; set; }

	/// <summary>
	/// Invoked when the user clicks outside the dialog.
	/// </summary>
	[Parameter]
	public EventCallback OnCancel { get; set; }

	/// <summary>
	/// Invoked when the form is submitted and the model is valid.
	/// </summary>
	[Parameter]
	public EventCallback OnSubmit { get; set; }

	/// <inheritdoc />
	protected override void OnParametersSet()
	{
		if (Model is null)
		{
			_editContext = null;
			return;
		}

		if (Model.Equals(_editContext?.Model))
			return;

		_editContext = new EditContext(Model);
		_editContext.SetFieldCssClassProvider(BootstrapFieldClassProvider.Instance);
	}

}