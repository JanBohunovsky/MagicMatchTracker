@using MagicMatchTracker.Features.Matches.Models
@inherits StatefulComponentBase<MagicMatchTracker.Features.Matches.Services.MatchPlayerSelectionState>

<FormDialog
	TModel="MatchPlayerSelectModel"
	Model="State.Model"
	FullscreenMode="DialogFullscreenMode.Never"
	OnSubmit="@(() => State.SaveAsync(CancellationToken))">
	<div class="modal-header">
		<h5 class="modal-title">Select players</h5>
		<button type="button" class="btn-close" aria-label="Close" @onclick="State.Cancel" disabled="@State.IsBusy"></button>
	</div>
	<div class="modal-body d-flex flex-column gap-3 p-0">
		@if (context.Players is null)
		{
			<div class="center m-4">
				<span class="spinner-border text-primary"></span>
			</div>
		}
		else if (context.Players.Count == 0)
		{
			<div class="center m-4">
				<span class="text-secondary">No players available</span>
			</div>
		}
		else
		{
			<div class="list-group list-group-flush">
				@foreach (var player in context.Players)
				{
					<div class="list-group-item list-group-item-action d-flex align-items-center gap-3 py-0 pe-0">
						<InputCheckbox class="form-check-input m-0" id="@player.Value.Id" @bind-Value="@player.IsChecked"/>
						<label class="form-check-label d-flex align-items-center gap-2 py-2 w-100 user-select-none" for="@player.Value.Id">
							<Avatar Player="player.Value" Size="28" class="my-1"/>
							<span>@player.Value.Name</span>
						</label>
					</div>
				}
			</div>
		}
	</div>
	<div class="modal-footer">
		<button type="button" class="btn btn-outline-secondary" @onclick="State.Cancel" disabled="@State.IsBusy">Cancel</button>
		<button type="submit" class="btn btn-primary" disabled="@(State.IsBusy || context.Players is null)">
			@if (State.IsBusy)
			{
				<span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
			}
			<span>@ConfirmCaption</span>
		</button>
	</div>
</FormDialog>

@code {

	private string ConfirmCaption => State.IsNew ? "Create" : "Save";

}