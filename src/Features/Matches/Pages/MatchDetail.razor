@page "/matches/{id:guid}"
@using MagicMatchTracker.Features.Matches.Components
@using MagicMatchTracker.Infrastructure.Pages
@inherits StatefulComponentBase<MagicMatchTracker.Features.Matches.Services.MatchDetailState>

<PageTitle>@PageTitle - Match Tracker</PageTitle>

@if (State.IsBusy)
{
	<p><em>Loading...</em></p>
	return;
}

@if (State.Match is null)
{
	<NotFound/>
	return;
}

<div class="heading">
	<h1>@State.Match.GetTitle(includeDate: false)</h1>

	<button class="btn btn-ghost-secondary btn-square hover-icon-filled"
	        title="Edit match"
	        @onclick="@(() => State.EditMatchAsync(CancellationToken))">
		<span class="icon" aria-hidden="true">edit</span>
	</button>
</div>

<div class="d-flex flex-column gap-2 mb-3">
	<div class="d-flex align-items-center gap-2">
		<span class="icon">calendar_today</span>
		<span>@State.Match.GetEffectiveDate().ToString("dddd, dd MMMM yyyy")</span>
	</div>
	@if (State.Match.TimeStarted is not null)
	{
		<div class="d-flex align-items-center gap-2">
			<span class="icon">timer</span>
			@if (State.Match.TimeEnded is null)
			{
				<span>In Progress &bull; @State.Match.GetFormattedDuration()</span>
			}
			else
			{
				@* TODO: Show turn counter if available *@
				<span>@State.Match.GetFormattedDuration()</span>
			}
		</div>
	}
	@if (State.Match.Notes is not null)
	{
		<div class="d-flex gap-2">
			<span class="icon">sticky_note_2</span>
			<span>@State.Match.Notes</span>
		</div>
	}
</div>

<div class="d-flex flex-column gap-3 mb-3">
	@if (State.Match.TimeStarted is null)
	{
		var hasPlayers = State.Match.Participations.Count > 0;
		var buttonStyle = hasPlayers ? "btn-outline-secondary" : "btn-primary";
		var buttonCaption = hasPlayers ? "Change players" : "Add players";
		var iconFilledStyle = hasPlayers ? string.Empty : "filled";
		<button class="btn @buttonStyle hover-icon-filled w-100 justify-content-center" @onclick="@(() => State.SelectPlayersAsync(CancellationToken))">
			<span class="icon @iconFilledStyle">patient_list</span>
			<span>@buttonCaption</span>
		</button>
	}

	@foreach (var participation in State.Match.Participations.OrderBy(mp => mp.Player.Name))
	{
		<MatchParticipationCard Participation="participation"/>
	}
</div>

<MatchEditDialog/>
<MatchPlayerSelectDialog/>

@code {

	private string PageTitle => State.Match?.GetTitle() ?? "Match Detail";

	[Parameter, EditorRequired]
	public Guid Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await State.LoadMatchAsync(Id, CancellationToken);
	}

}