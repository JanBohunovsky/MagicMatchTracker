@page "/players/{id:guid}"
@using MagicMatchTracker.Features.Players.Components
@using MagicMatchTracker.Infrastructure.Pages
@inherits StatefulComponentBase<MagicMatchTracker.Features.Players.Services.PlayerDetailState>

<PageTitle>@PageTitle - Match Tracker</PageTitle>

@if (State.IsBusy)
{
	<div class="heading placeholder-glow">
		<span class="player-name">
			<span class="placeholder placeholder-avatar"></span>
			<h1><span class="placeholder" style="width: 6rem;"></span></h1>
		</span>
		<a class="btn btn-ghost-secondary btn-square disabled placeholder"></a>
	</div>

	<div class="deck-list">
		@for (int i = 0; i < 6; i++)
		{
			<div class="card h-100 placeholder-glow">
				<div class="card-img-top bg-secondary-subtle" style="height: 139px"></div>
				<div class="card-body">
					<span class="card-title">
						<span class="placeholder col-8"></span>
					</span>
					<span class="card-subtitle">
						<span class="placeholder col-5 small text-secondary"></span>
					</span>
				</div>
				<div class="card-footer d-flex justify-content-between small">
					<div class="d-flex align-items-center gap-1">
						<span class="placeholder placeholder-icon"></span>
						<span class="placeholder placeholder-icon"></span>
						<span class="placeholder placeholder-icon"></span>
					</div>
					<div class="deck-stats">
						<div class="deck-stat gap-1">
							<span class="placeholder placeholder-icon"></span>
							<span class="placeholder placeholder-stat"></span>
						</div>
						<div class="deck-stat gap-1">
							<span class="placeholder placeholder-icon"></span>
							<span class="placeholder placeholder-stat"></span>
						</div>
					</div>
				</div>
			</div>
		}
	</div>
	return;
}

@if (State.Player is null)
{
	<NotFound/>
	return;
}

<PlayerEditDialog/>
<DeckEditDialog/>

<button class="btn btn-primary btn-fab"
        @onclick="() => State.AddNewDeckAsync(CancellationToken)">
	<span class="icon filled" aria-hidden="true">box_add</span>
	<span>New deck</span>
</button>

<div class="heading">
	<span class="player-name">
		<Avatar Player="State.Player" Size="32"/>
		<h1>@State.Player.Name</h1>
	</span>

	<button class="btn btn-ghost-secondary btn-square hover-icon-filled"
	        title="Edit player"
	        @onclick="() => State.EditPlayerAsync(CancellationToken)">
		<span class="icon" aria-hidden="true">edit</span>
	</button>
</div>

@if (State.Player.Decks.Count == 0)
{
	<p>Player has no decks.</p>
	return;
}

<ul class="deck-list">
	@foreach (var deck in State.Player.Decks)
	{
		<li>
			<a class="card deck-card" href="/players/@State.Player.Id/decks/@deck.Id">
				<img src="@deck.ImageUri" class="card-img-top deck-image" alt="Deck image" height="139"/>

				<div class="card-body">
					<span class="card-title fw-medium">@(deck.Name ?? deck.Commander)</span>
					<span class="card-subtitle fw-normal">
						<div class="d-flex flex-column text-secondary small">
							@if (deck.Name is not null)
							{
								<span>@deck.Commander</span>
							}
							<span>@deck.Partner</span>
						</div>
					</span>
				</div>

				<div class="card-footer d-flex justify-content-between small">
					<ColoursDisplay Value="deck.ColourIdentity"/>
					<div class="deck-stats">
						<div class="deck-stat" title="Win ratio">
							<span class="icon">trophy</span> 25%
						</div>
						<div class="deck-stat" title="Games played">
							<span class="icon">swords</span> 100
						</div>
					</div>
				</div>
			</a>
		</li>
	}
</ul>

@code {

	private string PageTitle => State.Player?.Name ?? "Player Detail";

	[Parameter, EditorRequired]
    public Guid Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await State.LoadPlayerAsync(Id, CancellationToken);
	}

}