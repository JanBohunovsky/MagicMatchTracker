@page "/players"
@using MagicMatchTracker.Features.Players.Components
@inherits StatefulComponentBase<MagicMatchTracker.Features.Players.Services.PlayerListingState>

<PageTitle>Players - Match Tracker</PageTitle>

<h1>Players</h1>

<button class="btn btn-primary btn-fab"
        disabled="@(State.Players is null)"
        @onclick="() => State.AddNewPlayerAsync(CancellationToken)">
	<span class="icon filled" aria-hidden="true">person_add</span>
	<span>New player</span>
</button>

@if (State.Players is null)
{
	<ul class="list-group list-group-flush">
		@for (int i = 0; i < 8; i++)
		{
			var width = i % 2 == 0 ? 8 : 6;
			<li class="player-entry list-group-item placeholder-glow">
				<span class="player-link">
					<span class="placeholder placeholder-avatar"></span>
					<span class="placeholder" style="width: @(width)rem;"></span>
				</span>
				<a class="btn btn-ghost-secondary btn-square my-2 disabled placeholder"></a>
			</li>
		}
	</ul>
	return;
}

<PlayerEditDialog/>

@if (State.Players.Count == 0)
{
	<p>No players available.</p>
	return;
}

<ul class="list-group list-group-flush player-list">
	@foreach (var player in State.Players)
	{
		<li class="player-entry list-group-item">
			<a href="/players/@player.Id" class="player-link text-body text-decoration-none">
				<Avatar Player="player" Size="28"/>
				<span>@player.Name</span>
			</a>
			<button class="btn btn-ghost-secondary btn-square hover-icon-filled my-2"
			        title="Edit player"
			        @onclick="() => State.EditPlayerAsync(player, CancellationToken)">
				<span class="icon" aria-hidden="true">edit</span>
			</button>
		</li>
	}
</ul>

@code {

	protected override async Task OnInitializedAsync()
	{
		await State.LoadPlayersAsync(CancellationToken);
	}

}