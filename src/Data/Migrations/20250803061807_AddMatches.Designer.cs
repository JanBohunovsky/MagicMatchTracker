// <auto-generated />
using System;
using MagicMatchTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MagicMatchTracker.Data.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20250803061807_AddMatches")]
    partial class AddMatches
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MagicMatchTracker.Data.Models.Deck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ColourIdentity")
                        .IsRequired()
                        .HasColumnType("character varying(5)")
                        .HasColumnName("colour_identity");

                    b.Property<string>("Commander")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("commander");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeckUri")
                        .HasColumnType("text")
                        .HasColumnName("deck_uri");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text")
                        .HasColumnName("image_uri");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Partner")
                        .HasColumnType("text")
                        .HasColumnName("partner");

                    b.HasKey("Id")
                        .HasName("pk_decks");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_decks_owner_id");

                    b.ToTable("decks", (string)null);
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("integer")
                        .HasColumnName("match_number");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTimeOffset?>("TimeEnded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_ended");

                    b.Property<DateTimeOffset?>("TimeStarted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_started");

                    b.HasKey("Id")
                        .HasName("pk_matches");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.MatchEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ParticipationMatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("participation_match_id");

                    b.Property<Guid>("ParticipationPlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("participation_player_id");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<int>("Turn")
                        .HasColumnType("integer")
                        .HasColumnName("turn");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_match_events");

                    b.HasIndex("ParticipationMatchId", "ParticipationPlayerId")
                        .HasDatabaseName("ix_match_events_participation_match_id_participation_player_id");

                    b.ToTable("match_events", (string)null);
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.MatchParticipation", b =>
                {
                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_id");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uuid")
                        .HasColumnName("deck_id");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_winner");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.HasKey("MatchId", "PlayerId")
                        .HasName("pk_match_participations");

                    b.HasIndex("DeckId")
                        .HasDatabaseName("ix_match_participations_deck_id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_match_participations_player_id");

                    b.ToTable("match_participations", (string)null);
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUri")
                        .HasColumnType("text")
                        .HasColumnName("avatar_uri");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_players");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.Deck", b =>
                {
                    b.HasOne("MagicMatchTracker.Data.Models.Player", "Owner")
                        .WithMany("Decks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_decks_players_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.MatchEvent", b =>
                {
                    b.HasOne("MagicMatchTracker.Data.Models.MatchParticipation", "Participation")
                        .WithMany("Events")
                        .HasForeignKey("ParticipationMatchId", "ParticipationPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_match_events_match_participations_participation_match_id_pa");

                    b.OwnsOne("MagicMatchTracker.Data.Models.MatchEventData", "Data", b1 =>
                        {
                            b1.Property<Guid>("MatchEventId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Notes")
                                .HasColumnType("text");

                            b1.HasKey("MatchEventId");

                            b1.ToTable("match_events");

                            b1.ToJson("data");

                            b1.WithOwner()
                                .HasForeignKey("MatchEventId")
                                .HasConstraintName("fk_match_events_match_events_id");
                        });

                    b.Navigation("Data");

                    b.Navigation("Participation");
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.MatchParticipation", b =>
                {
                    b.HasOne("MagicMatchTracker.Data.Models.Deck", "Deck")
                        .WithMany("Matches")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_match_participations_decks_deck_id");

                    b.HasOne("MagicMatchTracker.Data.Models.Match", "Match")
                        .WithMany("Participations")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_match_participations_matches_match_id");

                    b.HasOne("MagicMatchTracker.Data.Models.Player", "Player")
                        .WithMany("Matches")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_match_participations_players_player_id");

                    b.Navigation("Deck");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.Deck", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.Match", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.MatchParticipation", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MagicMatchTracker.Data.Models.Player", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
